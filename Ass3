ENTITY CLASS

package com.sres;

import jakarta.persistence.*;

@Entity
@Table(name = "service")
public class Service {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String owner;
    private String model;
    private String type;

    @Column(name = "date")
    private String date;

    // Getters and setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getOwner() { return owner; }
    public void setOwner(String owner) { this.owner = owner; }

    public String getModel() { return model; }
    public void setModel(String model) { this.model = model; }

    public String getType() { return type; }
    public void setType(String type) { this.type = type; }

    public String getDate() { return date; }
    public void setDate(String date) { this.date = date; }
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC 
 "-//Hibernate/Hibernate Configuration DTD 3.0//EN" 
 "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/vehicel</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">$ru$hti13</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>

        <mapping class="com.sres.Service"/>
    </session-factory>
</hibernate-configuration>

package com.sres;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import org.hibernate.*;
import java.io.IOException;
import java.util.List;

@WebServlet("/Vehicle")
public class Vehicle extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public Vehicle() {
        super();
    }

    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/plain");

        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            Transaction tx = session.beginTransaction();
            int choice = Integer.parseInt(request.getParameter("choice"));

            if (choice == 1) {
                // INSERT
                Service s = new Service();
                s.setOwner(request.getParameter("owner"));
                s.setModel(request.getParameter("model"));
                s.setType(request.getParameter("type"));
                s.setDate(request.getParameter("date"));

                session.save(s);
                response.getWriter().println("Inserted Successfully");

            } else if (choice == 2) {
                // UPDATE
                int id = Integer.parseInt(request.getParameter("id"));
                Service s = session.get(Service.class, id);

                if (s != null) {
                    s.setOwner(request.getParameter("owner"));
                    s.setModel(request.getParameter("model"));
                    s.setType(request.getParameter("type"));
                    s.setDate(request.getParameter("date"));
                    session.update(s);
                    response.getWriter().println("Updated Successfully");
                } else {
                    response.getWriter().println("Service not found.");
                }

            } else if (choice == 3) {
                // DELETE
                int id = Integer.parseInt(request.getParameter("id"));
                Service s = session.get(Service.class, id);

                if (s != null) {
                    session.delete(s);
                    response.getWriter().println("Deleted Successfully");
                } else {
                    response.getWriter().println("Service not found.");
                }

            } else if (choice == 4) {
                // SELECT
                List<Service> list = session.createQuery("from Service", Service.class).list();
                for (Service s : list) {
                    response.getWriter().println("ID: " + s.getId());
                    response.getWriter().println("Owner: " + s.getOwner());
                    response.getWriter().println("Model: " + s.getModel());
                    response.getWriter().println("Type: " + s.getType());
                    response.getWriter().println("Date: " + s.getDate());
                    response.getWriter().println("------------------------");
                }
            }

            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("Error: " + e.getMessage());
        }
    }
}
